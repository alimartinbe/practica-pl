
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 13 17:45:42 CET 2012
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 13 17:45:42 CET 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\006\000\002\002\004\000\002\003" +
    "\014\000\002\004\004\000\002\005\004\000\002\005\002" +
    "\000\002\006\011\000\002\006\011\000\002\006\011\000" +
    "\002\007\007\000\002\007\003\000\002\007\007\000\002" +
    "\007\007\000\002\010\005\000\002\011\004\000\002\011" +
    "\002\000\002\012\013\000\002\013\007\000\002\014\004" +
    "\000\002\014\002\000\002\015\004\000\002\016\004\000" +
    "\002\016\002\000\002\017\006\000\002\020\004\000\002" +
    "\021\004\000\002\021\002\000\002\022\005\000\002\023" +
    "\004\000\002\023\006\000\002\023\006\000\002\024\003" +
    "\000\002\024\004\000\002\025\004\000\002\025\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\004\004\006\001\002\000\006\003\025\014" +
    "\026\001\002\000\004\002\024\001\002\000\004\005\007" +
    "\001\002\000\004\015\010\001\002\000\004\006\011\001" +
    "\002\000\004\016\012\001\002\000\004\006\013\001\002" +
    "\000\004\007\014\001\002\000\004\020\016\001\002\000" +
    "\004\010\022\001\002\000\006\006\017\010\ufffc\001\002" +
    "\000\004\020\016\001\002\000\004\010\ufffe\001\002\000" +
    "\004\010\ufffd\001\002\000\004\011\023\001\002\000\006" +
    "\003\uffff\014\uffff\001\002\000\004\002\000\001\002\000" +
    "\004\005\146\001\002\000\004\005\112\001\002\000\004" +
    "\013\031\001\002\000\004\012\055\001\002\000\004\005" +
    "\032\001\002\000\004\016\033\001\002\000\004\007\034" +
    "\001\002\000\004\017\035\001\002\000\006\006\053\010" +
    "\uffeb\001\002\000\004\010\037\001\002\000\004\006\040" +
    "\001\002\000\004\020\042\001\002\000\004\011\051\001" +
    "\002\000\004\007\043\001\002\000\004\017\035\001\002" +
    "\000\004\010\045\001\002\000\006\006\046\011\uffee\001" +
    "\002\000\004\020\042\001\002\000\004\011\ufff0\001\002" +
    "\000\004\011\uffef\001\002\000\004\012\ufff1\001\002\000" +
    "\004\010\uffed\001\002\000\004\017\035\001\002\000\004" +
    "\010\uffec\001\002\000\004\005\057\001\002\000\004\002" +
    "\001\001\002\000\004\017\060\001\002\000\004\007\067" +
    "\001\002\000\004\011\066\001\002\000\006\006\063\011" +
    "\uffe7\001\002\000\004\017\060\001\002\000\004\011\uffe9" +
    "\001\002\000\004\011\uffe8\001\002\000\004\002\uffea\001" +
    "\002\000\010\016\071\020\073\021\070\001\002\000\004" +
    "\006\107\001\002\000\004\010\106\001\002\000\006\006" +
    "\uffe6\011\uffe6\001\002\000\004\006\074\001\002\000\004" +
    "\021\075\001\002\000\006\006\076\010\100\001\002\000" +
    "\006\021\102\022\101\001\002\000\006\006\uffe3\011\uffe3" +
    "\001\002\000\006\006\uffe2\011\uffe2\001\002\000\004\010" +
    "\105\001\002\000\004\010\104\001\002\000\006\006\uffe1" +
    "\011\uffe1\001\002\000\006\006\uffe0\011\uffe0\001\002\000" +
    "\006\006\uffdf\011\uffdf\001\002\000\006\006\uffe5\011\uffe5" +
    "\001\002\000\004\021\110\001\002\000\004\010\111\001" +
    "\002\000\006\006\uffe4\011\uffe4\001\002\000\006\003\113" +
    "\016\114\001\002\000\006\003\115\007\116\001\002\000" +
    "\006\003\115\007\116\001\002\000\006\006\ufff7\011\ufff7" +
    "\001\002\000\006\003\131\021\130\001\002\000\004\006" +
    "\120\001\002\000\004\020\122\001\002\000\004\011\127" +
    "\001\002\000\006\003\115\007\116\001\002\000\006\006" +
    "\124\011\ufff2\001\002\000\004\020\122\001\002\000\004" +
    "\011\ufff4\001\002\000\004\011\ufff3\001\002\000\004\013" +
    "\ufffb\001\002\000\004\006\135\001\002\000\004\006\132" +
    "\001\002\000\004\022\133\001\002\000\004\010\134\001" +
    "\002\000\006\006\ufff5\011\ufff5\001\002\000\006\003\137" +
    "\022\136\001\002\000\004\010\141\001\002\000\004\010" +
    "\140\001\002\000\006\006\ufff6\011\ufff6\001\002\000\006" +
    "\006\ufff8\011\ufff8\001\002\000\004\006\143\001\002\000" +
    "\004\020\122\001\002\000\004\011\145\001\002\000\004" +
    "\013\ufff9\001\002\000\004\016\147\001\002\000\006\003" +
    "\115\007\116\001\002\000\004\006\151\001\002\000\004" +
    "\020\122\001\002\000\004\011\153\001\002\000\004\013" +
    "\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\006\002\004\003\003\001\001\000\004\006" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\014\001\001\000\002" +
    "\001\001\000\004\005\017\001\001\000\004\004\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\027\001\001\000\004\017\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\035\001\001\000\004\016\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\043" +
    "\001\001\000\002\001\001\000\004\014\046\001\001\000" +
    "\004\013\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\060\022\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\063\001\001\000\006\020\064" +
    "\022\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\076\001\001\000\004\025\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\141\001\001\000\004\007\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\120" +
    "\001\001\000\002\001\001\000\004\007\122\001\001\000" +
    "\004\011\124\001\001\000\004\010\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\147\001\001" +
    "\000\002\001\001\000\004\010\151\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
	FileInputStream fichero=new FileInputStream(args[0]);
	DataInputStream entrada =new DataInputStream(fichero);
	try{
	new parser(new analizadorLexico(entrada)).parse();
	}
	catch ( Exception e) {
		System.out.println("Analisis INCORRECTO !!");
		System.exit(1);}
	System.out.println("Analisis Correcto ");
	
	}

    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
            /* Comprueba si el numero de lÃ­nea es mayor o igual que cero */
            if (s.left >= 0) {
                m.append(" en linea "+(s.left+1));
            /*Comprueba si el numero de columna es mayoro igual que cero */
            if (s.right >= 0)
                m.append(", y columna "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // acci ::= UBICACION PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acci",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // acci ::= POSICION PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acci",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // acce ::= COMA acci 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acce",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // acce ::= PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acce",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // acca ::= OBJETO COMA POSICION acce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acca",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // acca ::= POSICION COMA POSICION PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acca",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // acca ::= PERSONAJE PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acca",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // acc ::= ACCION PARIZQ acca 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acc",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // acp ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // acp ::= COMA ac 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ac ::= acc acp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ac",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // plan ::= PLAN INISEC ac FINSEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("plan",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // para ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // para ::= COMA par 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // par ::= ACCION para 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista ::= COMA list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // list ::= OBJETO PARIZQ par PARDER lista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // restriccion ::= POSACCIONES INISEC PERSONAJE PARIZQ par PARDER COMA list FINSEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // repe ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repe",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // repe ::= COMA rep 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repe",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // rep ::= OBJETO pos repe 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // pos ::= PARIZQ error COMA UBICACION PARDER 
            {
              Object RESULT =null;
		 parser.report_error("Falta la posicion del personaje.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // pos ::= PARIZQ POSICION COMA error PARDER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.report_error("Falta la ubicacion del personaje.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // pos ::= error 
            {
              Object RESULT =null;
		 parser.report_error("Falta la declaraciÃ³n de la posiciÃ³n del personaje.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // pos ::= PARIZQ POSICION COMA UBICACION PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio ::= INICIO INISEC error pos COMA rep FINSEC 
            {
              Object RESULT =null;
		 parser.report_error("Falta la palabra el personaje.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio ::= error INISEC PERSONAJE pos COMA rep FINSEC 
            {
              Object RESULT =null;
		 parser.report_error("Falta la palabra inicio al comienzo de la declaraciÃ³n.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= INICIO INISEC PERSONAJE pos COMA rep FINSEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // obs ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("obs",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // obs ::= COMA ob 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("obs",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ob ::= OBJETO obs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ob",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // escenario ::= ESCENARIO INISEC FONDO COMA PERSONAJE COMA PARIZQ ob PARDER FINSEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escenario",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= juego EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // juego ::= escenario inicio restriccion plan 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("juego",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

