
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 26 12:58:59 CEST 2012
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 26 12:58:59 CEST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\006\000\002\002\004\000\002\023" +
    "\014\000\002\023\014\000\002\023\014\000\002\023\014" +
    "\000\002\024\004\000\002\024\004\000\002\025\004\000" +
    "\002\025\002\000\002\003\011\000\002\003\011\000\002" +
    "\003\011\000\002\004\007\000\002\004\003\000\002\004" +
    "\007\000\002\004\007\000\002\005\005\000\002\005\005" +
    "\000\002\006\004\000\002\006\002\000\002\007\013\000" +
    "\002\007\013\000\002\007\013\000\002\010\007\000\002" +
    "\010\007\000\002\011\004\000\002\011\002\000\002\012" +
    "\004\000\002\012\004\000\002\013\004\000\002\013\002" +
    "\000\002\014\006\000\002\014\006\000\002\015\004\000" +
    "\002\016\004\000\002\016\002\000\002\017\005\000\002" +
    "\017\005\000\002\020\004\000\002\020\006\000\002\020" +
    "\006\000\002\021\003\000\002\021\004\000\002\021\004" +
    "\000\002\022\004\000\002\022\004\000\002\022\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\006\003\005\004\007\001\002\000\006\003" +
    "\057\014\060\001\002\000\004\005\046\001\002\000\004" +
    "\002\045\001\002\000\004\005\010\001\002\000\006\003" +
    "\011\015\012\001\002\000\004\006\036\001\002\000\004" +
    "\006\013\001\002\000\006\003\014\016\015\001\002\000" +
    "\004\006\031\001\002\000\004\006\016\001\002\000\004" +
    "\007\017\001\002\000\006\003\021\020\022\001\002\000" +
    "\004\010\027\001\002\000\006\006\023\010\ufff8\001\002" +
    "\000\006\006\023\010\ufff8\001\002\000\006\003\021\020" +
    "\022\001\002\000\004\010\ufffb\001\002\000\004\010\ufff9" +
    "\001\002\000\004\010\ufffa\001\002\000\004\011\030\001" +
    "\002\000\006\003\uffff\014\uffff\001\002\000\004\007\032" +
    "\001\002\000\006\003\021\020\022\001\002\000\004\010" +
    "\034\001\002\000\004\011\035\001\002\000\006\003\ufffc" +
    "\014\ufffc\001\002\000\004\016\037\001\002\000\004\006" +
    "\040\001\002\000\004\007\041\001\002\000\006\003\021" +
    "\020\022\001\002\000\004\010\043\001\002\000\004\011" +
    "\044\001\002\000\006\003\ufffd\014\ufffd\001\002\000\004" +
    "\002\000\001\002\000\004\015\047\001\002\000\004\006" +
    "\050\001\002\000\004\016\051\001\002\000\004\006\052" +
    "\001\002\000\004\007\053\001\002\000\006\003\021\020" +
    "\022\001\002\000\004\010\055\001\002\000\004\011\056" +
    "\001\002\000\006\003\ufffe\014\ufffe\001\002\000\004\005" +
    "\243\001\002\000\004\005\204\001\002\000\006\003\062" +
    "\013\064\001\002\000\004\005\174\001\002\000\006\003" +
    "\127\012\126\001\002\000\004\005\065\001\002\000\006" +
    "\003\066\016\067\001\002\000\004\007\120\001\002\000" +
    "\004\007\070\001\002\000\006\003\072\017\071\001\002" +
    "\000\006\006\115\010\uffe2\001\002\000\006\006\115\010" +
    "\uffe2\001\002\000\004\010\074\001\002\000\004\006\075" +
    "\001\002\000\006\003\076\020\100\001\002\000\004\007" +
    "\110\001\002\000\004\011\107\001\002\000\004\007\101" +
    "\001\002\000\006\003\072\017\071\001\002\000\004\010" +
    "\103\001\002\000\006\006\104\011\uffe6\001\002\000\006" +
    "\003\076\020\100\001\002\000\004\011\uffe9\001\002\000" +
    "\004\011\uffe7\001\002\000\006\003\uffec\012\uffec\001\002" +
    "\000\006\003\072\017\071\001\002\000\004\010\112\001" +
    "\002\000\006\006\104\011\uffe6\001\002\000\004\011\uffe8" +
    "\001\002\000\004\010\uffe4\001\002\000\006\003\072\017" +
    "\071\001\002\000\004\010\uffe3\001\002\000\004\010\uffe5" +
    "\001\002\000\006\003\072\017\071\001\002\000\004\010" +
    "\122\001\002\000\004\006\123\001\002\000\006\003\076" +
    "\020\100\001\002\000\004\011\125\001\002\000\006\003" +
    "\uffea\012\uffea\001\002\000\004\005\171\001\002\000\004" +
    "\005\131\001\002\000\004\002\001\001\002\000\006\003" +
    "\133\017\132\001\002\000\004\007\167\001\002\000\004" +
    "\007\142\001\002\000\004\011\141\001\002\000\006\006" +
    "\136\011\uffdd\001\002\000\006\003\133\017\132\001\002" +
    "\000\004\011\uffdf\001\002\000\004\011\uffde\001\002\000" +
    "\004\002\uffe0\001\002\000\010\016\144\020\146\021\143" +
    "\001\002\000\004\006\164\001\002\000\004\010\163\001" +
    "\002\000\006\006\uffdb\011\uffdb\001\002\000\004\006\147" +
    "\001\002\000\004\021\150\001\002\000\006\006\151\010" +
    "\153\001\002\000\010\003\155\021\156\022\154\001\002" +
    "\000\006\006\uffd8\011\uffd8\001\002\000\006\006\uffd7\011" +
    "\uffd7\001\002\000\004\010\162\001\002\000\010\006\uffd5" +
    "\010\161\011\uffd5\001\002\000\004\010\160\001\002\000" +
    "\006\006\uffd6\011\uffd6\001\002\000\006\006\uffd4\011\uffd4" +
    "\001\002\000\006\006\uffd2\011\uffd2\001\002\000\006\006" +
    "\uffd3\011\uffd3\001\002\000\006\006\uffda\011\uffda\001\002" +
    "\000\004\021\165\001\002\000\004\010\166\001\002\000" +
    "\006\006\uffd9\011\uffd9\001\002\000\010\016\144\020\146" +
    "\021\143\001\002\000\006\006\uffdc\011\uffdc\001\002\000" +
    "\006\003\133\017\132\001\002\000\004\011\173\001\002" +
    "\000\004\002\uffe1\001\002\000\004\016\175\001\002\000" +
    "\004\007\176\001\002\000\006\003\072\017\071\001\002" +
    "\000\004\010\200\001\002\000\004\006\201\001\002\000" +
    "\006\003\076\020\100\001\002\000\004\011\203\001\002" +
    "\000\006\003\uffeb\012\uffeb\001\002\000\006\003\205\016" +
    "\206\001\002\000\006\003\207\007\210\001\002\000\006" +
    "\003\207\007\210\001\002\000\006\006\ufff3\011\ufff3\001" +
    "\002\000\006\003\226\021\225\001\002\000\004\006\212" +
    "\001\002\000\006\003\213\020\215\001\002\000\006\003" +
    "\207\007\210\001\002\000\004\011\222\001\002\000\006" +
    "\003\207\007\210\001\002\000\006\006\217\011\uffed\001" +
    "\002\000\006\003\213\020\215\001\002\000\004\011\ufff0" +
    "\001\002\000\004\011\uffee\001\002\000\006\003\ufff7\013" +
    "\ufff7\001\002\000\006\006\217\011\uffed\001\002\000\004" +
    "\011\uffef\001\002\000\004\006\232\001\002\000\004\006" +
    "\227\001\002\000\004\022\230\001\002\000\004\010\231" +
    "\001\002\000\006\006\ufff1\011\ufff1\001\002\000\006\003" +
    "\234\022\233\001\002\000\004\010\236\001\002\000\004" +
    "\010\235\001\002\000\006\006\ufff2\011\ufff2\001\002\000" +
    "\006\006\ufff4\011\ufff4\001\002\000\004\006\240\001\002" +
    "\000\006\003\213\020\215\001\002\000\004\011\242\001" +
    "\002\000\006\003\ufff5\013\ufff5\001\002\000\004\016\244" +
    "\001\002\000\006\003\207\007\210\001\002\000\004\006" +
    "\246\001\002\000\006\003\213\020\215\001\002\000\004" +
    "\011\250\001\002\000\006\003\ufff6\013\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\006\002\005\023\003\001\001\000\004\003" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\017\001\001\000\002\001" +
    "\001\000\004\025\025\001\001\000\004\025\023\001\001" +
    "\000\004\024\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\062\001\001\000\002\001\001\000\004\014\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\072\001\001\000\004\013" +
    "\116\001\001\000\004\013\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\101" +
    "\001\001\000\002\001\001\000\004\011\104\001\001\000" +
    "\004\010\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\110\001\001\000\002\001" +
    "\001\000\004\011\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\133\017\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\136\001\001\000\006\015\137\017\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\151\001\001\000\004\022\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\167\001\001\000\002\001\001\000\006\015\171\017\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\236\001\001\000\004\004\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\213" +
    "\001\001\000\004\004\222\001\001\000\002\001\001\000" +
    "\004\004\215\001\001\000\004\006\217\001\001\000\004" +
    "\005\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\244\001\001\000\002\001\001\000\004\005\246\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
	FileInputStream fichero=new FileInputStream(args[0]);
	DataInputStream entrada =new DataInputStream(fichero);
	try{
	new parser(new analizadorLexico(entrada)).parse();
	}
	catch ( Exception e) {
		System.out.println("Analisis INCORRECTO !!");
		System.exit(1);}
	System.out.println("Analisis Correcto ");
	
	}

    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
            /* Comprueba si el numero de línea es mayor o igual que cero */
            if (s.left >= 0) {
                m.append(" en linea "+(s.left+1));
            /*Comprueba si el numero de columna es mayoro igual que cero */
            if (s.right >= 0)
                m.append(", y columna "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }   
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // acci ::= error PARDER 
            {
              Object RESULT =null;
		 parser.report_error("No se encuentra la posición o ubicación.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acci",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // acci ::= UBICACION PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acci",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // acci ::= POSICION PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acci",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // acce ::= COMA error 
            {
              Object RESULT =null;
		 parser.report_error("No se encuentra el siguiente elemento de posición.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acce",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // acce ::= COMA acci 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acce",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // acce ::= PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acce",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // acca ::= OBJETO COMA POSICION acce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acca",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // acca ::= POSICION COMA POSICION PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acca",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // acca ::= PERSONAJE PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acca",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // acc ::= error PARIZQ acca 
            {
              Object RESULT =null;
		 parser.report_error("No se encuentra la siguiente acción.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // acc ::= ACCION PARIZQ acca 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // acp ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // acp ::= COMA ac 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ac ::= acc acp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ac",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // plan ::= error INISEC ac FINSEC 
            {
              Object RESULT =null;
		 parser.report_error("Falta la palabra reservada <plan> al comienzo de la declaración.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("plan",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // plan ::= PLAN INISEC ac FINSEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("plan",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // para ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // para ::= COMA par 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // par ::= error para 
            {
              Object RESULT =null;
		 parser.report_error("Falta la accion.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // par ::= ACCION para 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista ::= COMA list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // list ::= error PARIZQ par PARDER lista 
            {
              Object RESULT =null;
		 parser.report_error("Falta el objeto antes de su declaración de posibles acciones.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // list ::= OBJETO PARIZQ par PARDER lista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // restriccion ::= POSACCIONES INISEC error PARIZQ par PARDER COMA list FINSEC 
            {
              Object RESULT =null;
		 parser.report_error("Falta el personaje.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // restriccion ::= error INISEC PERSONAJE PARIZQ par PARDER COMA list FINSEC 
            {
              Object RESULT =null;
		 parser.report_error("Falta la palabra reservada <posacciones> al comienzo de la declaración.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // restriccion ::= POSACCIONES INISEC PERSONAJE PARIZQ par PARDER COMA list FINSEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // repe ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repe",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // repe ::= COMA rep 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repe",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // rep ::= error pos repe 
            {
              Object RESULT =null;
		 parser.report_error("Falta el objeto antes de la declaración de su posición.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // rep ::= OBJETO pos repe 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // pos ::= PARIZQ error COMA UBICACION PARDER 
            {
              Object RESULT =null;
		 parser.report_error("Falta la posicion del personaje.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // pos ::= PARIZQ POSICION COMA error PARDER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.report_error("Falta la ubicacion del personaje.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // pos ::= error 
            {
              Object RESULT =null;
		 parser.report_error("Falta la declaración de la posición del personaje.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // pos ::= PARIZQ POSICION COMA UBICACION PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio ::= INICIO INISEC error pos COMA rep FINSEC 
            {
              Object RESULT =null;
		 parser.report_error("Falta el personaje.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inicio ::= error INISEC PERSONAJE pos COMA rep FINSEC 
            {
              Object RESULT =null;
		 parser.report_error("Falta la palabra reservada <inicio> al comienzo de la declaración.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio ::= INICIO INISEC PERSONAJE pos COMA rep FINSEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // obs ::= 
            {
              ArrayList<String> RESULT =null;
		ArrayList<String> lista = new ArrayList<String>(); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obs",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // obs ::= COMA ob 
            {
              ArrayList<String> RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> o1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obs",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ob ::= error obs 
            {
              ArrayList<String> RESULT =null;
		 parser.report_error("Falta el objeto antes de la declaración de su posición.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ob",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ob ::= OBJETO obs 
            {
              ArrayList<String> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int objeto1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int objeto1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> objeto1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = objeto1;  RESULT.add(o); System.out.println(o);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ob",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // escenario ::= ESCENARIO INISEC FONDO COMA error COMA PARIZQ ob PARDER FINSEC 
            {
              Escenario RESULT =null;
		 parser.report_error("Falta el personaje.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escenario",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // escenario ::= ESCENARIO INISEC error COMA PERSONAJE COMA PARIZQ ob PARDER FINSEC 
            {
              Escenario RESULT =null;
		 parser.report_error("Falta el fondo en la declaración.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escenario",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // escenario ::= error INISEC FONDO COMA PERSONAJE COMA PARIZQ ob PARDER FINSEC 
            {
              Escenario RESULT =null;
		 parser.report_error("Falta la palabra reservada <escenario> al comienzo de la declaracion.", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escenario",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // escenario ::= ESCENARIO INISEC FONDO COMA PERSONAJE COMA PARIZQ ob PARDER FINSEC 
            {
              Escenario RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int objetoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int objetoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> objeto = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Escenario(p, f, objeto); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escenario",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= juego EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // juego ::= escenario inicio restriccion plan 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Escenario e = (Escenario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println(e.getLista().toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("juego",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

